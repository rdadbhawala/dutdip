// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rdadbhawala/dutdip/samples/dutdip/model (interfaces: Dependency,DepFactory,Service,ServiceFactory,AllFactories)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/rdadbhawala/dutdip/samples/dutdip/model"
	reflect "reflect"
)

// MockDependency is a mock of Dependency interface
type MockDependency struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyMockRecorder
}

// MockDependencyMockRecorder is the mock recorder for MockDependency
type MockDependencyMockRecorder struct {
	mock *MockDependency
}

// NewMockDependency creates a new mock instance
func NewMockDependency(ctrl *gomock.Controller) *MockDependency {
	mock := &MockDependency{ctrl: ctrl}
	mock.recorder = &MockDependencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDependency) EXPECT() *MockDependencyMockRecorder {
	return _m.recorder
}

// Operation mocks base method
func (_m *MockDependency) Operation() {
	_m.ctrl.Call(_m, "Operation")
}

// Operation indicates an expected call of Operation
func (_mr *MockDependencyMockRecorder) Operation() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Operation", reflect.TypeOf((*MockDependency)(nil).Operation))
}

// MockDepFactory is a mock of DepFactory interface
type MockDepFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDepFactoryMockRecorder
}

// MockDepFactoryMockRecorder is the mock recorder for MockDepFactory
type MockDepFactoryMockRecorder struct {
	mock *MockDepFactory
}

// NewMockDepFactory creates a new mock instance
func NewMockDepFactory(ctrl *gomock.Controller) *MockDepFactory {
	mock := &MockDepFactory{ctrl: ctrl}
	mock.recorder = &MockDepFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDepFactory) EXPECT() *MockDepFactoryMockRecorder {
	return _m.recorder
}

// NewDependency mocks base method
func (_m *MockDepFactory) NewDependency() model.Dependency {
	ret := _m.ctrl.Call(_m, "NewDependency")
	ret0, _ := ret[0].(model.Dependency)
	return ret0
}

// NewDependency indicates an expected call of NewDependency
func (_mr *MockDepFactoryMockRecorder) NewDependency() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewDependency", reflect.TypeOf((*MockDepFactory)(nil).NewDependency))
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Feature mocks base method
func (_m *MockService) Feature() {
	_m.ctrl.Call(_m, "Feature")
}

// Feature indicates an expected call of Feature
func (_mr *MockServiceMockRecorder) Feature() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Feature", reflect.TypeOf((*MockService)(nil).Feature))
}

// MockServiceFactory is a mock of ServiceFactory interface
type MockServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServiceFactoryMockRecorder
}

// MockServiceFactoryMockRecorder is the mock recorder for MockServiceFactory
type MockServiceFactoryMockRecorder struct {
	mock *MockServiceFactory
}

// NewMockServiceFactory creates a new mock instance
func NewMockServiceFactory(ctrl *gomock.Controller) *MockServiceFactory {
	mock := &MockServiceFactory{ctrl: ctrl}
	mock.recorder = &MockServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceFactory) EXPECT() *MockServiceFactoryMockRecorder {
	return _m.recorder
}

// NewService mocks base method
func (_m *MockServiceFactory) NewService() model.Service {
	ret := _m.ctrl.Call(_m, "NewService")
	ret0, _ := ret[0].(model.Service)
	return ret0
}

// NewService indicates an expected call of NewService
func (_mr *MockServiceFactoryMockRecorder) NewService() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewService", reflect.TypeOf((*MockServiceFactory)(nil).NewService))
}

// MockAllFactories is a mock of AllFactories interface
type MockAllFactories struct {
	ctrl     *gomock.Controller
	recorder *MockAllFactoriesMockRecorder
}

// MockAllFactoriesMockRecorder is the mock recorder for MockAllFactories
type MockAllFactoriesMockRecorder struct {
	mock *MockAllFactories
}

// NewMockAllFactories creates a new mock instance
func NewMockAllFactories(ctrl *gomock.Controller) *MockAllFactories {
	mock := &MockAllFactories{ctrl: ctrl}
	mock.recorder = &MockAllFactoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAllFactories) EXPECT() *MockAllFactoriesMockRecorder {
	return _m.recorder
}

// NewDependency mocks base method
func (_m *MockAllFactories) NewDependency() model.Dependency {
	ret := _m.ctrl.Call(_m, "NewDependency")
	ret0, _ := ret[0].(model.Dependency)
	return ret0
}

// NewDependency indicates an expected call of NewDependency
func (_mr *MockAllFactoriesMockRecorder) NewDependency() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewDependency", reflect.TypeOf((*MockAllFactories)(nil).NewDependency))
}

// NewService mocks base method
func (_m *MockAllFactories) NewService() model.Service {
	ret := _m.ctrl.Call(_m, "NewService")
	ret0, _ := ret[0].(model.Service)
	return ret0
}

// NewService indicates an expected call of NewService
func (_mr *MockAllFactoriesMockRecorder) NewService() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewService", reflect.TypeOf((*MockAllFactories)(nil).NewService))
}
